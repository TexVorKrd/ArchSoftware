package Editor3D.modelEements;

import java.util.List;

/**
 * Сцена для моделей и источникааов света.
 * Содержит любое количиство источников света и как минимум одну модель.
 * Не зависит и существует независомо от того есть каамера озора или нет.
 */
public class Scene {
    public int id;
    public List<PoligonalModel> models;
    public List<Flash> flashes;

    /**
     * Заглушка для чего то в будущем.
     * Что то принимает и возвращает что-то подоное принятому.
     *
     * @param a   - что-то, что принимается
     * @param <T> - вид чего то принмаемого
     * @return - возвращает что то того же типа что и принято
     */
    public <T> T metod1(T a) {
        return a;
    }


    /**
     * Заглушка для чего то в будущем.
     * Что то принимает в двух экземплярах и возвращает что-то подоное принятому но в одном.
     * @param a - что-то, что принимается
     * @param <T> - вид чего то принмаемого
     * @return - возвращает что то того же типа что и принято
     */


    /**
     * Заглушка для чего то в будущем.
     * Что то принимает в двух экземплярах и возвращает что-то подоное принятому но в одном.
     *
     * @param a   - что-то, что принимается
     * @param b   - что-то, что принимается
     * @param <T> - вид чего то принмаемого
     * @return - возвращает что то того же типа что и принято но в одном экземпляре
     */
    public <T> T metod2(T a, T b) {
        return a;
    }

    /**
     * Конструктор сцены.
     * Вероятно ошибка в описании объекта или схеме касательно камеры.
     * Предполагаю что сцена без камеры может быть
     *
     * @param models  - Список моделей в сцене.
     * @param flashes - Список источников света в сцене
     */
    public Scene(List<PoligonalModel> models, List<Flash> flashes) throws Exception {

        if (models == null || models.size() == 0) throw new Exception("Сцена без модели невозможна");
        this.models = models;
        this.flashes = flashes;
    }


}
